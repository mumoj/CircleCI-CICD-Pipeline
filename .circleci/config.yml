version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend_stack:
        type: string
      frontend_stack:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.backend_stack>>
            aws cloudformation delete-stack --stack-name <<parameters.frontend_stack>>

  revert-migrations:
    description: Revert the last migration
    parameters: 
      workflow_id:
        type: string

    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/4GcxyZe9nkBV3BtHEtUrMe/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
       
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build1]
      - run:
          name: Build backed-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan backend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm install --save-dev webpack@5.73.0
            npm update mkdirp --depth
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install archiving tools
          command:  |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cd .circleci/ansible
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
      
  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4e:50:44:b3:07:9a:51:68:94:8a:56:f2:a5:15:79:0d"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            ls -a
            apk add --update ansible
            apk add tar gzip
            pip install awscli
            aws --version

      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            ls -a
            ansible all --list-hosts
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build1]
      - run:
          name: Install Dependacies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
            sudo apt-get update && sudo apt-get install -y ca-certificates
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/4GcxyZe9nkBV3BtHEtUrMe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
            aws --version

      - run:
          name: Install archiving tools
          command: |
            sudo apt-get update && sudo apt-get install -y  tar gzip
            
      - attach_workspace:
          at: ~/  

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["4e:50:44:b3:07:9a:51:68:94:8a:56:f2:a5:15:79:0d"]

      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y ansible
            sudo apt-get install -y  tar gzip
            sudo apt-get install -y awscli
            aws --version
      - attach_workspace:
          at: ~/

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ls -a
            echo "CHECK FILE PATH -------"
            pwd
            echo "---------------------------"
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            echo "Confirm archive -------"
            ls -a
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -v -i inventory.txt deploy-backend.yml

      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  smoke-test:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text) 
            export API_URL="http://${BACKEND_IP}:3030"

            if curl --insecure "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment:
          frontend_stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend_stack:  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          context: slack-notifications
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

        

     

